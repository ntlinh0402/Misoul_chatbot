# app/rag_manager.py
from app.pdf_processor_langchain import PDFProcessor

class RAGManager:
    """
    Qu·∫£n l√Ω t√¨m ki·∫øm v√† truy xu·∫•t th√¥ng tin t·ª´ Vector Database.
    
    L·ªõp n√†y t√¨m ki·∫øm t√†i li·ªáu li√™n quan ƒë·∫øn truy v·∫•n c·ªßa ng∆∞·ªùi d√πng,
    k·∫øt h·ª£p v·ªõi ph√¢n t√≠ch c·∫£m x√∫c ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† ph√π h·ª£p.
    """
    
    def __init__(self, vector_db=None):
        """
        Kh·ªüi t·∫°o RAGManager v·ªõi vector database
        
        Args:
            vector_db: Vector database (FAISS ho·∫∑c None)
        """
        # N·∫øu kh√¥ng cung c·∫•p vector_db, t·∫£i t·ª´ ƒëƒ©a
        self.vector_db = vector_db or PDFProcessor.load_vector_store()
        print("‚úÖ ƒê√£ kh·ªüi t·∫°o RAG Manager th√†nh c√¥ng!")
        
    def retrieve_documents(self, query, emotional_level=1, top_k=3):

        if self.vector_db is None:
            print("‚ö†Ô∏è Vector database kh√¥ng c√≥ s·∫µn, tr·∫£ v·ªÅ danh s√°ch t√†i li·ªáu tr·ªëng")
            return []
        
    # Ti·∫øp t·ª•c x·ª≠ l√Ω n·∫øu c√≥ vector_db...

        expanded_query = self._expand_query(query, emotional_level)
        
        # T√¨m ki·∫øm t√†i li·ªáu t∆∞∆°ng t·ª±
        try:
            if self.vector_db:
                documents = self.vector_db.similarity_search(expanded_query, k=top_k)
                print(f"üîç ƒê√£ t√¨m th·∫•y {len(documents)} t√†i li·ªáu li√™n quan")
                for i, doc in enumerate(documents):
                    category = doc.metadata.get('category', 'kh√¥ng r√µ')
                    print(f"  T√†i li·ªáu {i+1}: {category} - {doc.page_content[:50]}...")
                return documents
            else:
                print("‚ö†Ô∏è Vector database ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                return []
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi t√¨m ki·∫øm t√†i li·ªáu: {e}")
            return []
    
    def _expand_query(self, query, emotional_level):
        """
        M·ªü r·ªông truy v·∫•n d·ª±a tr√™n m·ª©c ƒë·ªô c·∫£m x√∫c
        
        Args:
            query: Truy v·∫•n g·ªëc
            emotional_level: M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)
            
        Returns:
            str: Truy v·∫•n ƒë√£ m·ªü r·ªông
        """
        # C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn m·ªói m·ª©c ƒë·ªô c·∫£m x√∫c
        emotional_keywords = {
            1: ["b√¨nh th∆∞·ªùng", "·ªïn ƒë·ªãnh", "t√≠ch c·ª±c"],
            2: ["lo l·∫Øng nh·∫π", "cƒÉng th·∫≥ng nh·∫π", "h∆°i bu·ªìn"],
            3: ["lo √¢u", "cƒÉng th·∫≥ng", "bu·ªìn", "tr·∫ßm"],
            4: ["tr·∫ßm c·∫£m", "lo √¢u n·∫∑ng", "cƒÉng th·∫≥ng cao", "s·ª£ h√£i"],
            5: ["kh·ªßng ho·∫£ng", "tuy·ªát v·ªçng", "c·ª±c k·ª≥ lo √¢u", "c·ª±c k·ª≥ tr·∫ßm c·∫£m"]
        }
        
        # L·∫•y t·ª´ kh√≥a ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô c·∫£m x√∫c
        keywords = emotional_keywords.get(emotional_level, emotional_keywords[1])
        
        # M·ªü r·ªông truy v·∫•n v·ªõi c√°c t·ª´ kh√≥a
        expanded_query = f"{query} {' '.join(keywords)}"
        
        return expanded_query
# app/rag_manager.py
class RAGManager:
    """
    Qu·∫£n l√Ω t√¨m ki·∫øm v√† truy xu·∫•t th√¥ng tin t·ª´ Vector Database.
    
    L·ªõp n√†y t√¨m ki·∫øm t√†i li·ªáu li√™n quan ƒë·∫øn truy v·∫•n c·ªßa ng∆∞·ªùi d√πng,
    k·∫øt h·ª£p v·ªõi ph√¢n t√≠ch c·∫£m x√∫c ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† ph√π h·ª£p.
    """
    
    def __init__(self, vector_db):
        """
        Kh·ªüi t·∫°o RAGManager v·ªõi vector database
        
        Args:
            vector_db: Vector database (Chroma)
        """
        self.vector_db = vector_db
        print("‚úÖ ƒê√£ kh·ªüi t·∫°o RAG Manager th√†nh c√¥ng!")
        
    def retrieve_documents(self, query, emotional_level=1, top_k=3):
        """
        Truy xu·∫•t t√†i li·ªáu li√™n quan d·ª±a tr√™n n·ªôi dung v√† tr·∫°ng th√°i c·∫£m x√∫c
        
        Args:
            query: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
            emotional_level: M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)
            top_k: S·ªë l∆∞·ª£ng t√†i li·ªáu t·ªëi ƒëa tr·∫£ v·ªÅ
            
        Returns:
            List[Document]: Danh s√°ch t√†i li·ªáu li√™n quan
        """
        # T√¨m ki·∫øm t·ª´ kh√≥a li√™n quan ƒë·∫øn c√°c danh m·ª•c
        category_keywords = {
            'anxiety': ['lo √¢u', 'cƒÉng th·∫≥ng', 'lo l·∫Øng', 's·ª£ h√£i', 'panic', 'h·ªìi h·ªôp', 'kh√≥ th·ªü', 'h·ªìi h·ªôp'],
            'depression': ['bu·ªìn', 'tr·∫ßm c·∫£m', 'tuy·ªát v·ªçng', 'm·ªát m·ªèi', 'ch√°n n·∫£n', 'c√¥ ƒë∆°n', 'kh√¥ng vui', 'kh√¥ng mu·ªën'],
            'cbt_techniques': ['suy nghƒ©', 'nh·∫≠n th·ª©c', 'h√†nh vi', 'k·ªπ thu·∫≠t', 'cbt', 'li·ªáu ph√°p', 'thay ƒë·ªïi'],
            'mindfulness': ['ch√°nh ni·ªám', 'thi·ªÅn', 'th∆∞ gi√£n', 'h√≠t th·ªü', 't·∫≠p trung', '√Ω th·ª©c', 'b√¨nh tƒ©nh']
        }
        
        # X√°c ƒë·ªãnh danh m·ª•c ti·ªÅm nƒÉng t·ª´ truy v·∫•n
        query_lower = query.lower()
        potential_categories = []
        
        for category, keywords in category_keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                potential_categories.append(category)
        
        # N·∫øu kh√¥ng t√¨m th·∫•y danh m·ª•c t·ª´ t·ª´ kh√≥a, s·ª≠ d·ª•ng m·ª©c ƒë·ªô c·∫£m x√∫c ƒë·ªÉ g·ª£i √Ω
        if not potential_categories:
            if emotional_level >= 4:
                potential_categories = ['depression', 'anxiety']
            elif emotional_level == 3:
                potential_categories = ['anxiety', 'cbt_techniques']
            elif emotional_level == 2:
                potential_categories = ['mindfulness', 'cbt_techniques']
            else:
                potential_categories = ['mindfulness', 'cbt_techniques']
        
        # T√¨m ki·∫øm v·ªõi filter n·∫øu c√≥ danh m·ª•c
        try:
            results = self.vector_db.similarity_search(query, k=top_k)
            documents = results
            
            # Log k·∫øt qu·∫£ t√¨m ki·∫øm
            print(f"üîç ƒê√£ t√¨m th·∫•y {len(documents)} t√†i li·ªáu li√™n quan")
            for i, doc in enumerate(documents):
                category = doc.metadata.get('category', 'kh√¥ng r√µ') if hasattr(doc, 'metadata') else 'kh√¥ng r√µ'
                print(f"  T√†i li·ªáu {i+1}: {category} - {doc.page_content[:50]}...")
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi t√¨m ki·∫øm t√†i li·ªáu: {e}")
            documents = []
        
        return documents